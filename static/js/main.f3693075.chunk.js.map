{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","App","startDate","moment","now","state","preciseDiff","this","timer","setInterval","setState","clearInterval","number","legend","style","display","alignItems","margin","fontSize","marginRight","writingMode","textOrientation","digit1","Math","trunc","digit2","slice","flexDirection","width","minWidth","years","months","days","hours","minutes","seconds","className","renderNumber","renderDigits","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAIAA,EAAQ,I,IAgEOC,E,YA5Db,aAAe,IAAD,uBACZ,+CACKC,UAAYC,IAAO,sBAAuB,uBAE/C,IAAIC,EAAMD,MAJE,OAKZ,EAAKE,MAAQF,IAAOG,YAAY,EAAKJ,UAAWE,GAAK,GALzC,E,iFAQO,IAAD,OAClBG,KAAKC,MAAQC,aAAY,WACvB,IAAIL,EAAMD,MACV,EAAKO,SAASP,IAAOG,YAAY,EAAKJ,UAAWE,GAAK,MACrD,O,6CAIHO,cAAcJ,KAAKC,S,mCAGRI,EAAQC,GACnB,OACE,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,WAAY,SAAUC,OAAQ,KAC3D,yBAAKH,MAAO,CAAEI,SAAU,IAAKC,YAAa,IAAKP,GAC/C,yBAAKE,MAAO,CAAEI,SAAU,GAAIE,YAAa,cAAeC,gBAAiB,YAAaR,M,mCAK/ED,GACX,IAAIU,EAASC,KAAKC,MAAMZ,EAAS,IAC7Ba,GAAU,GAAKb,GAAQc,OAAO,GAClC,OACE,yBAAKZ,MAAO,CAAEC,QAAS,OAAQY,cAAe,MAAOV,OAAQ,GAAIW,MAAO,MACtE,yBAAKd,MAAO,CAAEe,SAAU,KAAOP,GAC/B,yBAAKR,MAAO,CAAEe,SAAU,KAAOJ,M,+BAK3B,IAAD,EACkDlB,KAAKF,MAAtDyB,EADD,EACCA,MAAOC,EADR,EACQA,OAAQC,EADhB,EACgBA,KAAMC,EADtB,EACsBA,MAAOC,EAD7B,EAC6BA,QAASC,EADtC,EACsCA,QAC7C,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKtB,MAAO,CAACC,QAAS,OAAQY,cAAe,MAAOX,WAAY,WAC7DT,KAAK8B,aAAaP,EAAO,OACzBvB,KAAK8B,aAAaN,EAAQ,QAC1BxB,KAAK8B,aAAaL,EAAMA,EAAO,EAAI,QAAU,SAEhD,yBAAKlB,MAAO,CAAEC,QAAS,OAAQY,cAAe,MAAOX,WAAY,SAAUE,SAAU,KAClFX,KAAK+B,aAAaL,GADrB,KAEG1B,KAAK+B,aAAaJ,GAFrB,KAGG3B,KAAK+B,aAAaH,U,GAtDbI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f3693075.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport moment from 'moment';\nrequire('moment-precise-range-plugin');\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.startDate = moment('2011-06-11 18:00:00', 'YYYY-MM-DD HH:mm:ss');\n\n    let now = moment();\n    this.state = moment.preciseDiff(this.startDate, now, true);\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      let now = moment();\n      this.setState(moment.preciseDiff(this.startDate, now, true));\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  renderNumber(number, legend) {\n    return (\n      <div style={{ display: 'flex', alignItems: 'center', margin: 40 }}>\n        <div style={{ fontSize: 150, marginRight: 5}}>{number}</div>\n        <div style={{ fontSize: 20, writingMode: 'vertical-rl', textOrientation: 'upright'}}>{legend}</div>\n      </div>\n    )\n  }\n\n  renderDigits(number) {\n    let digit1 = Math.trunc(number / 10);\n    let digit2 = (\"\" + number).slice(-1);\n    return (\n      <div style={{ display: 'flex', flexDirection: 'row', margin: 40, width: 100 }}>\n        <div style={{ minWidth: 50 }}>{digit1}</div>\n        <div style={{ minWidth: 50 }}>{digit2}</div>\n      </div>\n    )\n  }\n\n  render() {\n    const { years, months, days, hours, minutes, seconds } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n            {this.renderNumber(years, \"ans\")}\n            {this.renderNumber(months, \"mois\")}\n            {this.renderNumber(days, days > 1 ? \"jours\" : \"jour\")}\n          </div>\n          <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', fontSize: 80}}>\n            {this.renderDigits(hours)} :\n            {this.renderDigits(minutes)} :\n            {this.renderDigits(seconds)}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}